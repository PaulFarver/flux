// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 463,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x16\x6f\xdd\x82\x1e\xf7\x26\x05\xc1\x83\x5e\x14\xef\xc3\x66\xb6\x1d\xdc\x26\x4b\x32\xdb\x0a\x31\xff\x5d\x36\xa1\xcb\x2a\x9e\x32\xc3\xbc\xf7\x65\x5e\x92\x12\xa4\xc7\xfe\xe0\x5d\x2f\xc7\x27\x19\xf8\xe0\x9d\xb2\x53\x34\x39\x9b\xa6\x69\xcc\x16\xef\x27\x46\xef\x87\xc1\x5f\xc5\x1d\x21\x11\x53\x64\x0b\xf5\x18\x83\xbf\x88\x65\x10\xba\x62\x9f\x02\xa9\x78\x87\xde\x07\xf4\xc3\xf4\x65\xf7\x66\x8b\xe7\x85\xfe\x18\xeb\xf9\x42\xe3\x4c\x89\xac\x33\x44\xc3\xc4\x3b\xe8\x89\xff\x40\x24\xa2\x0b\x4c\xca\xd6\x6c\x41\x11\x84\xc5\xbd\x83\xd7\x13\x87\xab\x44\x86\xe8\x4a\x59\x75\x6f\xdc\x05\xd6\xbd\xa1\x51\x3e\x38\x44\xf1\xae\xc5\xe5\xde\x7c\x8a\xb3\x2d\x7e\xe5\x5d\x6f\x94\xf3\x52\xa7\x04\x1e\x22\x23\xe7\x8a\x9a\x7b\x67\x91\xb3\x39\xb3\x92\x25\xa5\xd6\x00\x8e\xce\xdc\x96\x9c\x4d\xdd\xdc\xe0\x46\x7f\xa5\x33\xc7\x91\x3a\x2e\xaf\x58\xa5\xa5\x2f\xf7\xaf\xc6\x65\x9a\x52\x73\xe3\x57\x76\x4a\x18\x83\x38\xed\xb1\xb9\x8b\x9b\xff\x3e\xe7\x1b\xe2\xec\x5c\x3c\xcc\xae\x15\xe0\x27\x00\x00\xff\xff\x02\xd2\xd6\x67\xcf\x01\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7923,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6d\x6f\x1b\x37\xf2\x7f\xef\x4f\x31\x50\xfe\x40\x62\x40\x5a\xd9\x75\x5b\xfc\xb1\x3d\x17\x97\xe6\xc1\xf5\xa5\x49\x8d\x38\xbe\x43\x5f\xd5\xd4\xee\x48\x4b\x88\x4b\xee\x71\x48\xa9\x82\xd1\xef\x7e\x18\x72\x1f\xb8\x92\x6c\xe7\xfa\xee\xf2\x22\xb6\x77\xc9\xe1\xcc\x6f\x9e\x7e\x9c\x9d\xcd\x66\x27\xa2\x91\xff\x44\x4b\xd2\xe8\x1c\x44\xd3\xd0\x7c\x73\x7e\xb2\x96\xba\xcc\xe1\x2d\x36\xca\xec\x6a\xd4\xee\xa4\x46\x27\x4a\xe1\x44\x7e\x02\xa0\x45\x8d\x39\x2c\x95\xff\xe3\xe1\x01\xe4\x12\xb2\x4f\xa2\x46\x6a\x44\x81\xf0\xe7\x9f\xed\xfb\xf0\x67\x0e\x0f\x0f\xe3\xb7\x0f\x0f\x80\xba\xe4\x65\xd4\x60\xc1\xc2\x2c\x36\x4a\x16\x82\x72\x38\x3f\x01\x20\x54\x58\x38\x63\xf9\x0d\x40\x2d\x5c\x51\xfd\x22\x16\xa8\x28\x3e\x48\xcf\xe6\xd5\xce\x0a\x87\xab\x5d\x7c\xe9\x76\x0d\xe6\xf0\x19\x0b\x8b\xc2\xe1\x09\x80\xc3\xba\x51\xc2\x61\x2b\x2c\xb1\x80\xff\x09\xad\x8d\x13\x4e\x1a\xdd\x0b\x07\x68\xac\xa9\xd1\x55\xe8\x29\x93\x66\xde\x18\xeb\x72\x98\x5c\x9c\x5d\x9c\x4f\xe0\x05\x38\x54\x2a\x59\x01\xce\x00\x15\x56\x34\x08\xf3\x1a\x9d\x95\x05\xb1\x71\x8d\x91\xda\xbd\x24\xe0\xcd\x59\x2b\x58\x8d\x6c\xd8\xb3\x02\xa0\xc3\x22\xfc\x8e\x76\x23\x0b\x7c\x5d\x14\xc6\x6b\xf7\x69\xbc\x10\x60\x63\x94\xaf\xb1\x17\x35\x6b\x45\xad\xa4\x9b\xad\x71\xd7\x1f\x40\x8c\x82\x1b\x0e\xec\x9e\x0c\xf2\x66\xbc\xa5\x0c\x0e\x4e\x56\x95\xb8\x14\x5e\xb9\x8f\xa6\xc4\x1c\xce\xbe\x3d\x3b\x83\x17\xb0\xad\x50\x43\xcd\xda\x60\x09\x16\x45\x39\x33\x5a\xed\xa6\xb0\x45\xd8\x1a\xfd\xd2\xc1\x02\x41\x2c\x14\x32\x1e\x45\x55\x9b\xf2\xa4\x15\xf8\x02\xbe\x54\x92\x40\x12\x08\x70\x75\xb3\x24\xf0\x84\x25\x2c\x8d\x85\x15\x6a\xb4\xc2\x49\xbd\x82\xdb\xdb\x9f\x61\x8d\x3b\xca\xe0\x5a\xc3\x87\xff\x27\xf8\xf1\x12\xce\xb3\xf3\xb3\x69\x2f\xa5\x3b\x3b\x9a\x40\x20\x2c\xa6\x7a\x90\x61\x55\x34\x62\x09\x02\x08\x1b\xc1\x41\xd1\x02\x05\x5b\xec\xc5\x14\x42\xc3\xd6\x4a\xc7\x8a\x66\xc7\xf1\x5b\xa1\xee\xc1\xc0\xba\x71\xbb\xb7\xd2\xa6\x20\xd6\x58\x4a\x5f\xe7\xf0\x11\x6b\x63\x77\xa9\x9d\x08\x4b\xa3\x94\xd9\xb2\x45\xed\xd1\x92\x82\xa9\x9e\xf8\x99\x80\xc2\x93\x33\xb5\x64\x04\xd6\xda\x6c\xf5\xef\x95\x21\x47\xbd\x88\xa5\x54\x38\x85\x6d\x25\x8b\x0a\x76\xc6\xc3\x56\x2a\x15\x8d\x72\x06\x4a\xc3\x79\xc6\x8f\x79\x13\xff\x62\xc1\x6c\x35\xab\xdd\x0b\xb0\xd8\x18\xb0\xc2\x55\x68\xc1\x55\x42\xb7\x07\xaf\xa4\xab\xfc\x02\x0c\x3f\x44\x50\x72\x8d\x19\xfc\x66\xfc\x4b\xa5\x40\x28\x32\xdd\x11\x63\xb0\x41\x3a\x90\xda\x99\xb0\xa7\x30\xda\x09\xa9\xd1\x4e\x61\x81\xca\x6c\x33\xb8\xc5\x01\xd5\xca\xb9\x86\xf2\xf9\xbc\x34\x05\x65\x1c\x58\x45\xc9\xa9\x83\x7a\xce\xa9\x47\x6e\xbe\xf2\xb2\x44\x9a\x7b\xc2\x59\x63\xe5\x46\x38\x0c\xa1\xc7\x86\x64\x95\xab\x55\x2f\xa9\xf3\x05\x51\x35\x2b\x8c\x5e\xca\x55\xff\x0a\x20\x3e\xf8\x28\x9a\x3c\x79\x98\x26\xd2\x2c\xd9\xf6\x57\xfd\x92\xad\xfd\x02\xe7\x51\xc8\x10\x7e\xcf\xfa\x64\x2b\xa9\xe2\x27\x95\xd8\x20\x08\x28\xe5\x72\x89\x96\x8b\x66\x27\xa1\xcd\xaa\xa1\x30\x06\x17\x44\x71\xa9\x13\xb8\xb8\x6c\x64\x89\x1d\xec\x4b\xb9\xaa\x45\x33\x28\x22\x5d\x05\x42\x03\x6a\x67\x77\xc1\x86\xfb\xb8\xe8\x7e\x0a\x42\x97\xe0\x75\x61\x6a\xae\xd6\x61\x7f\xb4\xf6\x63\x70\xa7\xd0\x65\x2f\x05\xf5\x26\x48\x90\x48\xad\x3f\x0f\x3c\xc0\x30\xfc\x05\x0f\x24\xdb\x9e\xf5\x40\xa8\x04\xce\x80\xac\xb9\x4e\xc2\xd5\xcd\x55\x28\x02\xf0\x8a\xcd\x22\xb9\xd2\x52\x0f\x87\xb3\x71\x1b\xb4\x72\x29\x8b\x50\xb0\xa1\xf1\xb6\x31\x84\x74\xfa\x15\x40\xf6\x52\x62\xf9\x88\x28\x32\x40\x7c\xde\x57\x00\x07\xc2\xae\x86\x34\x7d\x04\xb1\x55\xb3\xe2\xfa\x41\x09\x34\xe3\x12\xfc\xe2\x91\x22\x7c\xb8\xef\x48\x11\xee\xe0\x7c\x78\x98\x85\x7e\xfb\x26\x80\xfc\x5e\x2a\x7c\x63\xb4\x63\xbd\x43\xdf\xfd\x3a\xc4\x3b\x68\x44\xeb\x51\x6f\x23\xa6\x0c\x3c\xeb\x54\x8e\x24\x0d\xfb\x63\x5b\x2d\x59\x01\x46\x69\xd6\x26\xdb\x8c\x0b\x17\x30\x7e\x8c\x95\x92\x7a\x00\xdc\x34\x41\xb0\xa4\xee\xcc\x32\x83\xeb\x5e\xfd\xd7\xf4\xa6\x8b\x28\x5e\x42\xe8\x58\x3b\x67\x3d\x4e\x47\x6e\x1b\x6b\xc9\xcd\x84\xc8\xd7\xd1\x16\xee\x3c\xd0\x8b\x99\x82\xe1\xea\xb7\x95\x84\xa1\x80\xf5\x4b\x7b\x59\xdd\x96\xdb\xe0\x87\xec\x28\xac\xa9\x5e\x3d\xac\xb3\x34\xce\x5b\xc3\x23\x34\x7d\x77\x38\xc8\x8f\xbd\xec\x18\x25\x14\x1f\xc9\x44\x68\xd6\x9f\xd0\x2a\xf1\x4a\x1b\x77\x44\x93\xd3\xff\x4a\x95\xaf\xe8\xfe\x5f\xa1\x4d\x4b\xd4\x4e\x7a\xf3\x62\x17\x38\xe0\x1e\x09\x3b\x69\xa3\xc6\x62\xe8\xd1\xda\xc0\x24\x8f\x5d\x60\x02\xb2\x16\x2b\xa4\x3e\xca\x32\x78\x2f\x75\x19\x22\xa9\xe6\x96\x66\xb1\x18\x2a\x66\x6c\x67\x0a\x05\x21\x37\xae\xb0\x95\x0b\x00\x73\x54\x10\xae\xef\x39\x95\x5f\x64\xa5\x29\xd6\x68\xb3\xc2\xd4\x73\x3b\x8f\xfd\x27\xfc\x98\x3b\xd1\xa7\x6d\x57\x43\x98\x6b\x32\x0f\xe5\x53\x9d\x58\x01\x6b\x9a\xf5\x6b\xc2\x31\x39\xb4\x02\xa5\x49\xa5\xe5\xe7\xd9\xf9\x77\xd9\xd9\x78\xed\x8d\x57\xea\xc6\x28\x59\xec\x72\xb8\x5e\x7e\x32\xee\xc6\x22\xa5\x56\x58\x24\xe3\x6d\x81\x94\xba\xc2\xe2\xbf\x3d\x92\x1b\x3d\x03\x28\x1a\x9f\xc3\x77\x67\xf5\xe8\x61\x1d\x68\x46\x0e\xdf\x7f\xfb\x51\x0e\x14\xd5\xd8\x74\xf3\x6c\xf0\xcc\x4d\xa0\xab\x17\x67\x17\xcc\xda\xa4\x5e\x1a\x5b\x87\xa4\x11\xaa\x5f\xad\xe4\x06\x35\x12\xdd\x58\xb3\xc0\x54\x03\x86\xf4\x6a\x1c\x33\xf1\xa8\x28\x70\xfc\x58\xb8\x2a\x87\xb9\x68\x64\x44\x7a\xf3\xfd\x5c\x96\xa8\x9d\x74\xbb\xac\xf1\x8b\x64\xad\xd4\xd2\x49\xa1\xde\xa2\x12\xbb\x5b\xee\x0d\x25\xe5\xf0\x5d\xb2\xc0\xc9\x1a\x8d\x77\x47\xde\x31\xc1\x93\xff\x1b\xaa\x26\x0d\x63\xe4\x98\xe3\xd4\x1c\x22\xc5\xba\x89\x9a\xa1\x2b\x82\x66\xe5\x9c\xa8\x8a\x15\x2a\xdc\x7a\x40\x99\xb6\xd7\xad\xd8\x65\x20\x75\x8c\xb9\x97\x14\xf7\x10\x55\xf3\x51\x0e\x77\x98\xfd\xaa\xd5\x2e\x0f\x65\x94\xa5\x31\xff\x0e\xdd\x71\xd1\x92\x0a\x4e\xa9\x06\xed\xd2\xd8\x02\x59\x68\x24\xdc\xcc\xb7\x1f\x53\x3c\xe5\xc4\x63\xdd\x37\xc2\xb6\xba\xc7\x65\x7f\x4d\xfd\x24\x47\xaf\x75\xa1\x7c\xe8\xda\x7c\x6d\x88\xe4\xaa\xeb\xe8\x91\x97\x3e\x43\xa3\x3b\x22\xfd\x03\x6f\xdd\xa3\xb8\x43\x33\x2b\xb1\x50\xc2\xf2\x75\x61\x61\x36\x49\x01\x78\x82\x82\xc6\xd6\x9c\x1a\x6f\x8d\x71\xf3\x8c\xa8\x7a\xd4\x00\xa1\x47\xa7\x4e\x06\x7a\x34\x89\x27\x4f\xbb\x25\x89\x04\xd4\x1b\x69\x8d\x0e\x64\x24\xf2\xbc\xc9\x87\xbb\x9f\xde\xbd\xf9\xf5\xd3\xfb\xeb\xab\x49\xa4\x1f\x53\xc6\xc3\x6c\xd0\xda\x31\x57\x4c\xc4\x84\x66\xbf\xd8\x45\x26\xe7\xd4\x31\x1b\x0f\x48\xde\xa1\x8d\x43\x70\xf2\xe2\x47\x0d\x65\x52\xc1\x97\xde\xee\x34\x2e\xd1\x09\x0d\x6e\xb5\x0b\x3e\x49\x44\xec\x93\xe9\xd4\xe9\x81\x49\x77\xd7\x3e\xa1\x41\x28\x87\x56\xf3\xb5\xee\x40\xe3\xa5\x35\x75\xcf\x65\x6a\x26\x01\x82\x38\xdc\x5a\x46\xc7\x30\x28\x53\xac\xe9\xd0\xd9\xa8\x37\xf9\x11\x5c\x06\xb8\x47\xb8\x6c\x84\xf2\x78\x80\xc9\x73\x41\xbc\x1f\x03\x1d\xdf\x7b\x22\x02\x98\x6e\x8e\x69\xe6\x13\x44\xf3\x91\xb8\xe4\x55\x91\x59\x8f\xd6\x8d\xeb\xc3\xa0\x74\x3b\xc6\x39\xa4\x95\x03\x21\xe8\xaf\x86\x94\x04\x5c\x67\x56\xf4\x01\x1b\x74\xe4\xd6\x78\x50\x57\x9e\x20\x2e\x8f\x84\x5f\xa2\xe8\x3e\x2d\x79\xac\x6c\x6c\x85\x0e\x7c\x92\x7c\xd3\xa8\x1d\xfc\xfc\xe5\xcb\x0d\x2c\x04\xc9\x02\x84\x77\x15\x93\xd9\xd0\x06\x84\x8a\x94\x64\xb8\x48\xb3\xc0\x8d\x14\xc1\x86\xfb\xab\xeb\x2f\xbf\xbf\xbe\xfb\xf2\xf3\xdd\xed\xbb\xcf\xf7\xc1\x57\xfd\xa3\x0f\xef\x7e\xbb\x1f\x65\xeb\x46\x58\x29\x16\x0a\xa9\xbb\x59\x26\x02\x69\xc4\x37\xdb\xe0\x7b\x6f\x4d\x3d\x0e\xc0\xb8\xec\x33\x2e\xf3\x91\xdb\x46\x34\x92\xab\x32\x9b\x30\x00\xc0\x01\x93\x8f\xf0\x88\x10\xc4\xe1\x0e\x96\x4c\x23\x0a\x51\x54\xcc\xdd\xf5\x28\x31\xfb\xfb\x28\x23\xc5\xd2\xa7\x89\x14\x63\xdb\x0b\x67\xb2\xa1\x1d\x4e\x85\x8d\xd3\x70\x48\x21\x74\x87\xb1\xab\x90\xd2\x40\x1e\x2e\x21\x6e\x6b\x58\x4b\xcf\x38\x85\x72\x11\x26\x69\xc1\xb5\x50\x99\x6d\x18\x1c\x19\xad\xb1\x08\x2e\x93\x6e\x1c\xf8\xb3\x59\x6f\x40\x98\x1a\xf0\xe1\x97\xfd\xa3\xac\xbd\x2d\x65\xb4\x29\xb2\x42\x79\x72\x68\x33\xee\x3e\x2a\x85\xe4\x8e\x62\xa1\x1c\xa0\x78\x13\x97\x5e\xdf\x8c\x8c\xe2\x9a\x49\xe8\xc2\x60\x6a\x9c\x96\x83\x0e\xdd\x7a\x8e\x2e\x67\x79\x65\x18\x15\x25\x71\x9e\x6a\xdc\xae\xbe\x3c\x19\x51\x64\x49\x50\x7b\x0a\xa3\xb3\x80\x9e\xc4\x32\xd6\x82\x45\xe8\xca\x81\xa0\x86\x89\xd9\xab\x6e\x0c\x75\xba\x9f\x88\x5d\xff\x9a\x86\x00\x4e\x06\x67\x23\x45\xb8\x93\xc5\xee\x3c\x2b\xa5\xbd\x3c\xe8\xd9\xa9\x5a\x9f\x13\x7a\x3c\x38\xef\xee\xf3\x2f\x71\xb2\x27\xf4\x2a\xbe\xbb\x92\x2e\x4c\x9b\x48\x3a\x63\x77\x7d\xaf\x79\xcf\xb4\x3e\x11\xf7\x54\xce\x71\xd8\x24\xb6\xb7\x29\x73\x34\x9d\xd2\x5c\xe8\x88\xff\xff\xbd\x4a\x33\xf3\x34\x1f\xfe\xfe\xf0\xee\xb7\xd3\xbf\xc7\x99\x57\xb8\x13\x78\x42\x3b\x1f\x94\xcd\xd2\x44\xef\xee\x7d\x57\xd2\xb1\x91\x49\xad\x63\xe4\x38\xd1\xbc\x55\x97\x0f\x0f\xc7\x56\x84\x4a\xa4\x08\x61\x54\x21\xd3\x7d\x2b\xe9\x12\x45\xf2\xe4\x32\x31\x5b\xa1\x9b\x91\x13\xd6\xe1\xd1\xd2\xb6\xaf\xc5\xc2\x0a\x5d\x54\x9d\x22\x3f\x85\xbf\xf6\x75\x69\xed\xe0\xca\x49\xc7\x64\x30\x11\x66\x09\xb7\x21\x62\xe9\x1f\x46\xea\x64\xc3\x64\x3a\x79\xde\xb8\xa7\xca\xac\x45\x4e\x85\x22\x0e\x50\x6a\xa1\xe5\x92\xaf\x38\x9c\xd5\x24\x4b\xb4\x31\x40\xf6\x2e\x8a\xa1\x51\x18\x42\xf0\xba\x44\xbb\x17\x75\x16\x95\x70\x72\x83\x81\xc1\x53\x97\x13\xab\x51\xe4\x1d\x01\x3e\x98\x49\x7e\x51\x4a\x7b\x3e\x8d\x3f\xbf\x79\x0a\xe2\x04\xba\xf0\x9d\xe1\x18\x74\x61\x78\xdf\xa1\x7f\xb0\xea\x69\xa1\x77\x84\xf6\x68\x60\x11\xda\x3e\xb2\xf6\xd6\x3c\x2d\xf1\x5d\x2d\xe4\x51\x35\x91\x5f\x74\x32\x0f\x56\x3d\xd7\x39\x91\x0b\xe4\xd6\xb0\x53\x50\x87\x69\x3e\x63\xcd\x24\x4a\xba\xbd\x79\x5c\x8a\x77\x4b\x47\x5a\xb2\x71\xf9\x04\xfb\xe8\x76\xb4\xb2\x78\xd7\xe5\xdf\xd6\xb8\x03\x59\xfe\xf8\x14\xb3\x4c\xb4\xe1\xad\xc2\x79\x8b\xa3\x61\xe0\x91\x33\xc2\xeb\xdd\xac\x5f\x4f\xa3\xe2\xdb\xf5\x1e\x90\x0e\x2a\x41\x81\x15\x19\xad\x76\x20\x8a\x02\x29\xf6\xa7\x0a\xe3\x3c\xfd\x55\x37\xba\xbd\x5f\x0a\x45\x78\x7f\x7a\xe4\xb4\x6e\xff\xd8\x0a\x72\xd6\x17\x2e\x1e\xb4\x0d\x23\x11\xa6\xc9\xde\x01\xed\x74\x01\x0b\x63\xd6\x6b\xc4\x86\x43\xbd\x3f\x63\xb2\x92\x6e\x32\x85\x1a\x05\x23\xc4\x75\x15\x44\x98\x53\xb4\xd1\xef\x1b\x72\x16\x45\xdd\xa7\xc1\xbe\x36\x2c\x9a\x0b\x8b\x43\xae\x3e\x8f\x3b\x5a\xe3\x1f\xae\xf3\x76\xd2\x78\x85\x86\x49\x77\xc6\xa4\x6b\x8b\x89\x90\x57\x98\xad\xb2\x29\xfc\x0b\x99\x9d\xbf\x51\xc6\x97\xa7\x59\x18\x12\x3a\xb3\xc6\x38\xe7\x13\xd6\xc9\xc2\x2b\x61\x3b\x14\x5b\x29\xfb\x1d\xbd\x3d\xf5\x72\x4b\x5c\xce\x0b\x96\x95\x6d\x59\x6e\xb6\x35\x76\x4d\xfd\x85\x7d\x6f\x5b\x38\xe8\x52\x2c\x8a\xf3\x6f\x2e\x0e\xff\x4f\x0d\xbe\x45\xbb\x39\xf2\x5d\x8e\xaf\x26\x03\x9d\xe1\x10\xfd\x21\xed\xab\x62\xcd\x3d\x29\xfa\x8a\xd0\x25\x1f\xfb\x5e\x26\xdf\x0b\x93\x0f\x7f\x6c\x62\x18\x60\x87\xeb\x41\x36\x4a\x4a\x25\xc9\xa1\x9e\xb5\x2a\x5c\xe6\x17\x67\x17\xe7\x27\x2d\xd5\x7e\x5d\x96\x32\x8e\x66\xb8\x6b\xbe\x66\xca\x3f\xaa\xb5\xc3\xfb\x81\x38\x8d\x72\xd9\x86\x6e\xfc\x8c\x9c\x59\xf8\xfe\xfa\x48\x19\x18\x3e\xc5\x76\x87\xfe\xda\xb4\x47\xbe\xfd\x74\xdb\xb1\x20\x9a\xf6\x03\xd8\x96\x13\x81\x2e\x8d\xa3\x6e\xb8\x5b\x8b\x5d\x18\x73\xa9\xcd\x30\xb1\xd5\xa4\x8c\x59\xfb\x06\x24\x91\x47\x02\xa3\x81\x4c\x8d\xf0\xc1\x2f\xd0\x6a\x74\x18\xa6\xbd\xbe\xa1\x61\x8e\x5e\x6a\xea\x26\x69\x93\x4f\x46\xe3\x24\x7d\x13\xef\x25\xe9\x24\x3d\x1e\x4e\xe3\xe1\x7a\x77\xbf\x08\xfa\x8d\xde\xf4\xb7\xb7\xc9\xf9\xe4\xe4\x3f\x01\x00\x00\xff\xff\xf5\x76\xfa\x27\xf3\x1e\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
